#!/bin/bash
function randpass {
	passlength=${1:-6}
	printf "%s\n" "$(LC_ALL=C tr -dc A-Za-z0-9 < /dev/urandom | head -c$passlength)"
}

function epoch {
	if [[ -z $1 ]]; then
		date +%s
	else
		date -d @$1 2>/dev/null || date -r $1
	fi
}

function ghblame {
	local fullpath=$1
	local path_no_lineno=${fullpath%:*}
	if [[ ! -e $path_no_lineno ]]; then
		printf "%s %s\n" "$path_no_lineno" "does not exist" >&2
		return 1
	fi
	local lineno=${fullpath#*:}
	if [[ $lineno =~ [0-9]+ ]]; then
		lineno="#L$lineno"
	else
		lineno=""
	fi

	local abs_path=$(cd "${path_no_lineno%/*}" &>/dev/null; printf "%s/%s" "$(pwd)" "${path_no_lineno##*/}")
	local file_dir=${abs_path%/*}

	local in_git_repo
	[ -d $file_dir/.git ] || (cd $file_dir; git rev-parse --git-dir) > /dev/null 2>&1
	in_git_repo=$?
	if [[ $in_git_repo != 0 ]]; then
		printf "%s\n" "Not in a git repo" >&2
		return $in_git_repo
	fi

	local root=$(cd $file_dir >/dev/null; git rev-parse --show-toplevel)
	local ref
	ref=$(cd $root >/dev/null; git symbolic-ref HEAD 2>/dev/null)
	if [[ $? != 0 ]]; then
		printf "%s\n" "Not on any branch" >&2
		return 1
	fi

	local branch=${ref#refs/heads/}
	local remote_name=$(cd $root >/dev/null; git config branch.$branch.remote 2>/dev/null)
	local remote_url=$(cd $root >/dev/null; git config remote.$remote_name.url 2>/dev/null)

	if [[ ! $remote_url =~ 'github.com' ]]; then
		printf "%s\n" "Upstream is not a github repo" >&2
		return 1
	fi
	local remote_dir
	remote_dir=${remote_url#git@github.com:}
	remote_dir=${remote_dir#https://github.com/}
	local rel_path=${abs_path#$root}
	open "https://github.com/$remote_dir/blame/$branch$rel_path$lineno"
}

git-branch-status() {
	# by http://github.com/jehiah
	local head=$(git rev-parse HEAD)
	local ahead
	local ahead_arrow
	local behind
	local behind_arrow
	printf "%-20s %-13s %s\n" "branch" "behind" "ahead"
	for ref in $(git for-each-ref --format="%(upstream:short)" refs/heads); do
		# git rev-list --left-right ${local}...${remote} -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
		behind=$(git rev-list ${ref}..${head} --count)
		ahead=$(git rev-list ${head}..${ref} --count)
		[ $behind -eq 0 ] && behind_arrow="="
		[ $behind -gt 0 -a $behind -lt 10 ] && behind_arrow="<-"
		[ $behind -gt 10 -a $behind -lt 100 ] && behind_arrow="<--"
		[ $behind -gt 100 ] && behind_arrow="<---"
		[ $ahead -eq 0 ] && ahead_arrow="="
		[ $ahead -gt 0 -a $ahead -lt 10 ] && ahead_arrow="->"
		[ $ahead -gt 10 -a $ahead -lt 100 ] && ahead_arrow="-->"
		[ $ahead -gt 100 ] && ahead_arrow="--->"
		printf "%-20s %4i %4s|%-4s %4i \n" $ref $behind $behind_arrow $ahead_arrow $ahead
	done
}

docker-clean-images() {
	docker images -q --filter "dangling=true" | xargs docker rmi
}

docker-rm-dead-containers() {
	docker ps -a -q --filter "status=exited" --filter "status=dead" | xargs docker rm
}
